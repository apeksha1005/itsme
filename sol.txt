Assignment 1 BT

Title of the Assignment: Write a smart contract on a test network, for Bank account of a customer for following operations:
•	Deposit money
•	Withdraw Money
•	Show balance



// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BankAccount {
    address public owner;
    uint256 public balance;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }

    function deposit(uint256 amount) public onlyOwner {
        require(amount > 0, "Deposit amount must be greater than zero");
        balance += amount;
    }

    function withdraw(uint256 amount) public onlyOwner {
        require(amount > 0, "Withdrawal amount must be greater than zero");
        require(amount <= balance, "Insufficient balance");
        balance -= amount;
    }

    function getBalance() public view returns (uint256) {
        return balance;
    }
}


Assignment 2 BT

Title of the Assignment:Write a program in solidity to create student data using structures

pragma solidity >=0.8.2 <0.9.0;
contract Student_management
{
    struct Student 
    {
        int stud_id;
        string name;
        string department;
    }
    Student[] Students;

    function add_stud(int stud_id, string memory name, string memory department) public
    {
        Student memory stud = Student(stud_id,name,department);
        Students.push(stud);
}

    function getStudent(int stud_id) public view returns(string memory, string memory)
    {
        for (uint i=0; i<Students.length; i++)
        {
            Student memory stud = Students[i];
            if(stud.stud_id==stud_id)
            {
                return(stud.name,stud.department);
            }
        }
        return("Not Found", "Not Found");
    }
}

Assignment 3 BT

Title of the Assignment:Write a program in solidity to create student data use array and fallback
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentContract {
    struct Student {
        uint256 id;
        string name;
        uint256 age;
    }

    Student[] public studentArray;

    // Function to add a student
    function addStudent(uint256 id, string memory name, uint256 age) public {
        studentArray.push(Student(id, name, age));
    }

    // Get the total number of students
    function getTotal() public view returns (uint256) {
        return studentArray.length;
    }

    // Get student details
    function getStudent(uint256 index) public view returns (uint256, string memory, uint256) {
        require(index < studentArray.length, "Invalid Index");
        Student memory student = studentArray[index];
        return (student.id, student.name, student.age);
    }

    // Fallback function: This function is called when someone sends Ether to the contract without specifying a function.
    receive() external payable {
        // Log sender's address and the amount of Ether sent
        address sender = msg.sender;
        uint256 amount = msg.value;
        emit EtherReceived(sender, amount);

        // You can add custom logic here if needed to handle the incoming Ether.
    }

    event EtherReceived(address indexed sender, uint256 amount);
}

Assignment 4 BT
metamask installation
